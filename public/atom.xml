<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>Gurpreet&#39;s thoughts</title>
    <description>Gurpreet&#39;s thoughts, experiences and learnings</description>
    <link>https://imGurpreetSK.github.io/</link>
    
    <language>en</language>
    <copyright>Copyright 2025, Calvin Tran</copyright>
    <lastBuildDate>Sat, 22 Feb 2025 22:51:40 -0800</lastBuildDate>
    <generator>Hugo - gohugo.io</generator>
    <docs>http://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link href="https://imGurpreetSK.github.io//atom.xml" rel="self" type="application/atom+xml"/>
    
    
    <item>
      <title>Thoughts on working with Agents</title>
      <link>https://imGurpreetSK.github.io/posts/thoughts-on-working-with-agents/</link>
      <description>&lt;ul&gt;
&lt;li&gt;Type: Live post&lt;/li&gt;
&lt;li&gt;Last updated: 13 July, 2025&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Software engineering is evolving


&lt;a href=&#34;#links&#34;&gt;1&lt;/a&gt;, quite rapidly while at it. While I do fear for my job and what impacts AI might have on me, I cannot say that some part of this AI wave haven&amp;rsquo;t been fun.
LLMs and Agents have become a crucial part of my workflow and I&amp;rsquo;ve found myself relying on them much more than I imagined I would. I use Claude/Claude Code as my daily driver, with Gemini as fallback for one-off chat scenarios or for rare cases requiring it&amp;rsquo;s generous context window.&lt;/p&gt;
&lt;p&gt;This post acts as one where I put my thoughts on things, how I use different tools and what works for me. Expect this to be updated with time, as I learn more.&lt;/p&gt;
&lt;h2 id=&#34;changes-i-see&#34;&gt;Changes I see&lt;/h2&gt;
&lt;h3 id=&#34;prototyping-is-becoming-much-cheaper&#34;&gt;Prototyping is becoming much cheaper&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;A prototype is an early sample, model, or release of a product built to test a concept or process.&amp;rdquo; 


&lt;a href=&#34;https://en.wikipedia.org/wiki/Prototype&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s becoming much quicker - and 


&lt;a href=&#34;https://www.infoq.com/presentations/Simple-Made-Easy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;easier&lt;/a&gt; - to get to a working prototype. Verifying a hypothesis is becoming cheaper as Vibe coding gains popularity.
For me, vibing practically implements the principle of &amp;ldquo;Iterate quickly, produce results&amp;rdquo; and as long as I do not see a Vibe-PR™ raised to prod, I&amp;rsquo;m all in favor of it.&lt;/p&gt;
&lt;h3 id=&#34;accelerated-learning&#34;&gt;Accelerated learning&lt;/h3&gt;
&lt;p&gt;Whether it&amp;rsquo;s about working on projects that I&amp;rsquo;ve wanted to implement or learning about projects I&amp;rsquo;ve wanted to explore, learning new things has become easier than it ever has been.&lt;/p&gt;
&lt;p&gt;Want synopsis of a project? Here it is. A detailed document on workings of the core rendering engine? Can do. Want to create a game using tech you&amp;rsquo;ve never used? Sure thing.&lt;/p&gt;
&lt;p&gt;


&lt;a href=&#34;#context-is-king&#34;&gt;&lt;em&gt;Describe&lt;/em&gt;&lt;/a&gt; what you need Claude Code to do and it&amp;rsquo;ll iterate on it with you until you&amp;rsquo;re satisfied with the results.&lt;/p&gt;
&lt;h2 id=&#34;what-ive-learnt-so-far&#34;&gt;What I&amp;rsquo;ve learnt so far&lt;/h2&gt;
&lt;h3 id=&#34;ai-has-a-multiplicative-effect&#34;&gt;AI has a multiplicative effect&lt;/h3&gt;
&lt;p&gt;Agents and LLMs demonstrate a multiplicative effect on an individual&amp;rsquo;s abilities - High ability individuals see their impact increase multifold. With the changes we&amp;rsquo;re seeing, Engineers who&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Think from first principles&lt;/li&gt;
&lt;li&gt;Have strong fundamentals&lt;/li&gt;
&lt;li&gt;Communicate effectively&lt;/li&gt;
&lt;li&gt;Collaborate efficiently, and&lt;/li&gt;
&lt;li&gt;Have good intuition&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;seem to excel at AI adoption and reap most benefits.&lt;/p&gt;
&lt;h3 id=&#34;context-is-king&#34;&gt;Context is King&lt;/h3&gt;
&lt;p&gt;The information provided to the LLM during conversation is called the 


&lt;a href=&#34;https://docs.anthropic.com/en/docs/build-with-claude/context-windows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Context&lt;/em&gt;&lt;/a&gt;. The initial prompt, conversation that follows and any additional setup information picked from memory and other files, external links, etc all form the Context for the LLM.&lt;/p&gt;
&lt;p&gt;Providing the correct amount of context is critical; provide less details and you won&amp;rsquo;t get the desired outcome, share too much and you risk wasting effort due to 


&lt;a href=&#34;https://www.dbreunig.com/2025/06/22/how-contexts-fail-and-how-to-fix-them.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;large context-related problems&lt;/a&gt;. It&amp;rsquo;s important to say that providing the correct amount of context is quite difficult - iterating on the initial prompt, steering the conversation in the correct direction, even restarting the chat are expected and helped me learn from mistakes.&lt;/p&gt;
&lt;p&gt;I like to think of my conversation with an LLM/Agent as one similar to one I might have with an intern on my team - they might understand the intent but they can&amp;rsquo;t do exactly what I need without me telling them. &lt;strong&gt;It&amp;rsquo;s on me to be explicit and empower them to do a task as expected.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As an example, the following is the prompt I first used to start my recent 


&lt;a href=&#34;https://github.com/imGurpreetSK/pongwars&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pong-wars&lt;/a&gt; project. The prompt doesn&amp;rsquo;t define the task very well and the result was way off of what was expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;How can I create something like https://github.com/vnglst/pong-wars using compose multiplatform?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The current project has been created for you as a starter project targeting Android, iOS, desktop and web using compose multiplatform for UI code sharing.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conversely, the following prompt performed much better and generated a project that could be further iterated on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Problem statement:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;I want to create a game using kotlin multiplatform as shown &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;in&lt;/span&gt; the video here: [link](https:&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;//&lt;/span&gt;private&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;user&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;images&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;githubusercontent&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;3457693&lt;/span&gt;&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;300288131&lt;/span&gt;&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;4&lt;/span&gt;eae12fa&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;bdc1&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;49&lt;/span&gt;ee&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;8&lt;/span&gt;b39&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;c94deb7cb2c8&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;mov&lt;span style=&#34;color:#d20f39&#34;&gt;?&lt;/span&gt;jwt&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;=&lt;/span&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTE1MjEyNDksIm5iZiI6MTc1MTUyMDk0OSwicGF0aCI6Ii8zNDU3NjkzLzMwMDI4ODEzMS00ZWFlMTJmYS1iZGMxLTQ5ZWUtOGIzOS1jOTRkZWI3Y2IyYzgubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDcwMyUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTA3MDNUMDUzNTQ5WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YzM0YzQwNjJmYzk1Y2ViNmEwZDZjMmEyYzQ3ZDcyMjA2MTExYzZhODM4M2E4YmYwZDdjMTMyMzEwNzVlOWU2ZCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;xdwdcwuE&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;Cmi0sxjhbkHhtSA9Lm8WmtJypyFYqYkiDo)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The target platforms are Android, iOS, web &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;and&lt;/span&gt; desktop&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt; The UI is to be created using Compose multiplatform&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The game starts with the square area split vertically into two equal parts with two balls, one on each side&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Overview:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;Area&lt;/span&gt; description:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The area is composed of smaller squares, all of equal size&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt; The squares on the same side are of the same color&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;As soon as a ball hits a square, it bounces back to the opposite side&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt; The square is marked claimed by the ball &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;and&lt;/span&gt; its
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;color changes to the opposite color&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt; Additionally, the counter increases by one showing the squares count claimed by
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;each color&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Each square has a &lt;span style=&#34;color:#fe640b&#34;&gt;1&lt;/span&gt;px black border&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ball description:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Each ball is of the same color as the opposite area&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt; As soon as the ball hits a square, it bounces back to the opposite side&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The square is marked claimed by the ball &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;and&lt;/span&gt; its color changes to the opposite color&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt; Additionally, the counter increases by one showing the squares count claimed by each color&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The ball moves at a constant speed throughout the area&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt; If the ball hits a wall, it bounces back to the opposite side&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Game termination:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The game keeps on going indefinitely until closed by the user&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Task:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;1.&lt;/span&gt; Break the task into smaller tasks&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;2.&lt;/span&gt; Provide a list of tasks to complete&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt; Take approval on execution plan before making any changes&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;3.&lt;/span&gt; Once each task is complete, commit the changes with a meaningful commit message&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fe640b&#34;&gt;4.&lt;/span&gt; Start with the next task only once the commit has been approved by me&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;im-loving-planning-mode&#34;&gt;I&amp;rsquo;m loving planning mode&lt;/h3&gt;
&lt;p&gt;Imagine conversing with a highly-knowledgeable coworker who understands the problem space, is non-judgmental, is commendably patient and is always available to chat. That&amp;rsquo;s how I feel about planning mode.&lt;/p&gt;
&lt;p&gt;I can have long discussions to refine an idea into deliverable milestones and actionable tasks, all while steering the conversation towards my desired outcome. If I feel like, I can later ask the peer to be an expert programmer and pair with me to implement a part or whole of the feature we just discussed at length.&lt;/p&gt;
&lt;h3 id=&#34;do-not-blindly-trust-all-actions&#34;&gt;Do not blindly trust all actions&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve had tests deleted from codebase to achieve &amp;lsquo;Ensure all tests pass before committing changes&amp;rsquo;. LLMs can play dirty to achieve task completion; I&amp;rsquo;d suggest actively reviewing the changes they make and uphold them to same standards as a developer.&lt;/p&gt;
&lt;p&gt;While I understand the lure of &lt;code&gt;--dangerously-skip-permissions&lt;/code&gt; (or similar) but I&amp;rsquo;d recommend keeping it only for side projects running in an isolated container.&lt;/p&gt;
&lt;h2 id=&#34;how-llms-and-agents-improve-my-productivity&#34;&gt;How LLMs and Agents improve my productivity&lt;/h2&gt;
&lt;p&gt;The following is a list of workflows where I see highest positive impact of using LLMs and Agents:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Experiments and spikes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the one area that has been impacted the most, in a way that looking back at older ways of operation feel &lt;em&gt;dirty&lt;/em&gt;. I have saved hours while joyfully experimenting as I focus on the what to do than how to do it. To top that, if things don&amp;rsquo;t work out as planned, I can just &lt;code&gt;/clear&lt;/code&gt; and &lt;code&gt;git reset&lt;/code&gt; and start again - &lt;strong&gt;the fear of failure has turned into joy of learning by exploration&lt;/strong&gt; and I&amp;rsquo;m thankful for that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jira tickets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t tried connecting to Atlassian services via MCP server, I&amp;rsquo;d highly recommend you do. My recent Jira workflow has essentially stripped down to asking Claude Code to &lt;code&gt;Come up with a plan to implement Jira ticket PROJ-1234&lt;/code&gt; after I break down the task into smaller, well defined sub-tasks that can be run and committed by agents.&lt;/p&gt;
&lt;p&gt;I also sometimes use 


&lt;a href=&#34;https://jules.google&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jules by Google&lt;/a&gt; for asynchronous work, mainly for project chores.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Project exploration&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/init&lt;/code&gt;, if not done already
&lt;ul&gt;
&lt;li&gt;Tweak as required for best experience&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Help me understand the application architecture&lt;/code&gt; or &lt;code&gt;What does the CoreRepository do?&lt;/code&gt; or &lt;code&gt;Go through the git history and help me understand how X component evolved over time&lt;/code&gt; or any other project related answers, delivered hot right to your screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Side projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I want to work on side projects that help me learn something new. This is much more lucrative now - the speed of execution has increased due to the decrease in cost of bootstrapping. By this I mean I can now focus on learning about the one thing that matters to me the most without having to go through the pain of setting up the project first.&lt;/p&gt;
&lt;p&gt;This simply let&amp;rsquo;s me learn new things more efficiently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Learning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Two tools I use frequently to learn about concepts or systems that I do not work directly with are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DeepWiki&lt;/p&gt;
&lt;p&gt;Mostly to explore libraries used in projects - explore them to have a high level understanding of how they work and itch my &amp;lsquo;buy how&amp;rsquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NotebookLM&lt;/p&gt;
&lt;p&gt;For researching topics and asking questions interactively. I love NotebookLM because I provide the sources, with option to explore similar sources recommended by the book. Currently, I&amp;rsquo;m creating a notebook to learn more about Gradle and project structuring.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;yet-to-explore&#34;&gt;Yet to explore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Multi-agent workflows&lt;/li&gt;
&lt;li&gt;Anthropic&amp;rsquo;s Write tests, commit; code, iterate, commit 


&lt;a href=&#34;#links&#34;&gt;(TDD) workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;E2E tests with Maestro/Android Studio journeys/playwright&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;I&amp;rsquo;d highly recommend watching Andrej Karpathy&amp;rsquo;s talk 



  &lt;a href=&#34;www.youtube.com/watch?v=LCEmiRjPEtQ&#34;&gt;Software is changing (again)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Simon Willison&amp;rsquo;s amazing 


&lt;a href=&#34;https://simonwillison.net/tags/ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;David Crawshaw: 


&lt;a href=&#34;https://crawshaw.io/blog/programming-with-agents&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How I program with Agents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Armin Ronacher&amp;rsquo;s 


&lt;a href=&#34;https://www.youtube.com/watch?v=nfOVgz_omlU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;talk on Agentic Coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Claude code 


&lt;a href=&#34;https://www.anthropic.com/engineering/claude-code-best-practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In particular: Simon on 


&lt;a href=&#34;https://simonwillison.net/2025/Jul/3/table-saws/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;future of programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Regardless of the use case
&lt;ul&gt;
&lt;li&gt;Ask for options, a lot. First iteration is rarely what you want.&lt;/li&gt;
&lt;li&gt;Always ask for a plan first, and be explicit with this - think, harder, ultra, think step-by-step are your friends.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/thoughts-on-working-with-agents/</guid>
      <pubDate>Sat, 05 Jul 2025 12:28:41 -0700</pubDate>
    </item>
    
    <item>
      <title>KotlinConf 2025</title>
      <link>https://imGurpreetSK.github.io/posts/kotlinconf-2025/</link>
      <description>&lt;p&gt;This year, I finally had the chance to attend KotlinConf in Copenhagen—a conference I’ve wanted to experience for a long time. It was also my first time visiting Copenhagen and exploring Europe, which made the trip even more memorable. The week was powered by plenty of falafels, chocolate, and coffee. (On the flip side, I had the worst pizza of my life—definitely not what I expected from Europe!)&lt;/p&gt;
&lt;h2 id=&#34;exciting-announcements&#34;&gt;Exciting Announcements&lt;/h2&gt;
&lt;p&gt;KotlinConf 2025 was packed with exciting updates for the Kotlin community. I’m especially looking forward to new language features like rich errors, name-based destructuring, and context receivers. The introduction of Junie and 


&lt;a href=&#34;https://github.com/JetBrains/koog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Koog&lt;/a&gt; also caught my attention—they both look promising for future projects. Another big highlight: CMP for iOS is now stable! 🎉&lt;/p&gt;
&lt;p&gt;If you missed the event, you can find all the talk videos 


&lt;a href=&#34;https://www.youtube.com/@Kotlin/playlists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;my-kotlinconf-experience&#34;&gt;My KotlinConf Experience&lt;/h2&gt;
&lt;h3 id=&#34;day-0-registration&#34;&gt;Day 0: Registration&lt;/h3&gt;
&lt;p&gt;The first day was all about getting settled in, picking up my badge, and soaking in the excitement of being surrounded by fellow Kotlin enthusiasts.&lt;/p&gt;
&lt;h3 id=&#34;day-1-meeting-the-community&#34;&gt;Day 1: Meeting the Community&lt;/h3&gt;
&lt;p&gt;Day one was a whirlwind of meeting amazing Android and Kotlin engineers. It was refreshing to have real conversations in person, rather than just chatting online. Some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Meeting Urs Peter:&lt;/strong&gt; Urs has a way of explaining things that makes even complex topics easy to understand. I could listen to him talk for hours.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dan’s Talk:&lt;/strong&gt; Dan’s session was insightful and definitely one of the must-see talks of the conference.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chris Horner’s Session:&lt;/strong&gt; Chris gave a fantastic talk on building fully custom UIs with Compose. It was both practical and inspiring.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Catching Up with Seb:&lt;/strong&gt; Always a pleasure to meet Seb and exchange ideas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;day-2-more-great-talks&#34;&gt;Day 2: More Great Talks&lt;/h3&gt;
&lt;p&gt;On the second day, Ralf’s talk stood out for me. His insights and presentation style made it one of the highlights of the conference.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;There were a few people I didn’t get a chance to say hi to, which I regret—but there’s always next time. For now, I’m off to find some more falafel and reflect on an inspiring week.&lt;/p&gt;
&lt;p&gt;Till next time!&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/kotlinconf-2025/</guid>
      <pubDate>Mon, 02 Jun 2025 10:47:17 -0700</pubDate>
    </item>
    
    <item>
      <title>Maybe, set LayoutParams of view to be inflated in Compose UI&#39;s AndroidView</title>
      <link>https://imGurpreetSK.github.io/posts/why-you-should-be-setting-layout-params-of-android-views-inflated-in-compose-ui-androidview/</link>
      <description>&lt;p&gt;I spent half of my day today figuring out why a &lt;code&gt;WebView&lt;/code&gt; does not properly load menu on a web page properly while all the other functionality seems to be working as expected. The screen was written in Compose UI and employed &lt;code&gt;AndroidView&lt;/code&gt; to compose an Android &lt;code&gt;WebView&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Turns out, I missed that &lt;code&gt;LayoutParams&lt;/code&gt; need to be set for the &lt;code&gt;WebView&lt;/code&gt; provided via the factory block; just modifying &lt;code&gt;AndroidView&lt;/code&gt; to fill max available size won’t work as expected.&lt;/p&gt;
&lt;p&gt;Writing this so I do not waste more time in the future again, and so this can help any other poor soul pulling his/her hair, trying to figure out why their &lt;code&gt;WebView&lt;/code&gt; isn’t working as expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    AndroidView(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        factory = { context &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WebView(context).apply {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                layoutParams = &lt;span style=&#34;color:#df8e1d&#34;&gt;ViewGroup&lt;/span&gt;.LayoutParams(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#df8e1d&#34;&gt;ViewGroup&lt;/span&gt;.&lt;span style=&#34;color:#df8e1d&#34;&gt;LayoutParams&lt;/span&gt;.MATCH_PARENT,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#df8e1d&#34;&gt;ViewGroup&lt;/span&gt;.&lt;span style=&#34;color:#df8e1d&#34;&gt;LayoutParams&lt;/span&gt;.MATCH_PARENT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                with(settings) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Your webview settings.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;&lt;/span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                loadUrl(url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modifier = Modifier
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .fillMaxSize()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .padding(padding)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/why-you-should-be-setting-layout-params-of-android-views-inflated-in-compose-ui-androidview/</guid>
      <pubDate>Fri, 07 Feb 2025 23:51:03 -0800</pubDate>
    </item>
    
    <item>
      <title>On software being like gardening</title>
      <link>https://imGurpreetSK.github.io/posts/on-software-being-like-gardening/</link>
      <description>&lt;p&gt;Link to Product leader John Cutler’s 


&lt;a href=&#34;https://cutlefish.substack.com/p/tbm-234-maintenance-ktlo-and-bau&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;published article&lt;/a&gt; 


&lt;a href=&#34;https://cutlefish.substack.com/p/tbm-234-maintenance-ktlo-and-bau&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;about software maintenance&lt;/a&gt; suggesting that software is more like gardening than car maintenance, quoted from Pragmatic Engineer’s paid article 


&lt;a href=&#34;https://newsletter.pragmaticengineer.com/p/bug-management-that-works-part-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bug management that works, Pt 1&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve always been bothered by how teams use words and phrases like maintenance, keeping the lights on (KTLO), and business as usual. I get what they mean, but there always seems to be a stigma around this work.&lt;/p&gt;
&lt;p&gt;When we maintain a car—oil changes, tire rotations, etc.—we aim to keep the car running smoothly and safely. When we maintain a car, we don&amp;rsquo;t normally fix bugs, apply patches, optimize performance, check for compatibility, remove features, refactor, and incorporate user feedback. Why? Car maintenance revolves around physical wear and tear, degradation of materials over time, and the occasional replacement of parts with a limited lifespan. These actions don&amp;rsquo;t &amp;ldquo;fix&amp;rdquo; or &amp;ldquo;improve&amp;rdquo; the car but rather preserve its current state and prolong its effective lifespan.&lt;/p&gt;
&lt;p&gt;In a sense, software is much more like a garden than a mechanical entity like a car. We plant the initial seeds (start designing and building), water and nurture it (make updates
and enhance features), and periodically have to prune (refactor) and weed (remove bugs and vulnerabilities). A product requires constant attention to grow and adapt to its environment (user needs, technological changes, and market trends). It&amp;rsquo;s an ongoing process of growth, adaptation, and care.&lt;/p&gt;
&lt;p&gt;Applicable concepts: seeding, sowing, weeding, watering, pruning, cultivation, composting, harvesting, hardening off, propagating, rotating, aeration, grafting, trellising, thinning, etc.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Having working in software with teams of different sizes, this comparison makes a lot of sense to me not only for maintenance but also how good software is written.&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/on-software-being-like-gardening/</guid>
      <pubDate>Wed, 02 Oct 2024 23:51:03 -0800</pubDate>
    </item>
    
    <item>
      <title>Kotlinx Serialization - How the serialization process works</title>
      <link>https://imGurpreetSK.github.io/posts/kotlinx-serialization-process-working/</link>
      <description>&lt;br&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/kotlinx-serialization/banner-kotlin-mobile.webp&#34;
  alt=&#34;Header&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Now that we know the basic concepts of kotlin serialization and have also seen how to use it to serialize and deserialize data, let’s talk a bit about the library’s internal working and some of the important concepts.&lt;/p&gt;
&lt;p&gt;Note: If you haven’t gone through the previous posts, you should take a look at those first.&lt;/p&gt;
&lt;p&gt;The entire process of serialization is composed of two separate sub-processes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Serialization&lt;/li&gt;
&lt;li&gt;Encoding&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these processes has a single responsibility, which enables clear separation of roles and allows both to operate independently. This is the reason behind the extensibility and flexibility of the library. Please note that despite being independent, these operations are still sequential— encoding always takes place after serialization.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/kotlinx-serialization/serialization-process.webp&#34;
  alt=&#34;serializaton process&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;Serialization process&lt;/div&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/kotlinx-serialization/deserialization-process.webp&#34;
  alt=&#34;deserializaton process&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;Deserialization process&lt;/div&gt;
&lt;p&gt;Serialization is the process of decomposing the input entity into a stream of primitive elements — characters, ints, booleans and so on — so that they can be ‘encoded’ by the encoder. This process can be recursive, meaning that any complex entities inside the input will be further broken into primitive elements. The process is considered completed once all of the input is converted to a stream of primitive elements, and there are no more complex entities remaining.&lt;/p&gt;
&lt;p&gt;Encoding is the part where the input is actually processed. The stream of primitives generated by the serialization process are fed to the encoder as an input. The encoder’s action can be conversion to another desired format, storing, processing or transforming the data into some other format, or something else based on one’s requirements.&lt;/p&gt;
&lt;p&gt;We’ll know more about Encoding in a later post, for now let’s focus our energies on the first part of the process — Serialization.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Remember the User object which we used to understand the basics in the 



  &lt;a href=&#34;https://imGurpreetSK.github.io/posts/kotlin-serialization-getting-started&#34;&gt;introductory blog post&lt;/a&gt;? We’re going to use that to look into the workings of plugin and runtime.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e66f5;font-weight:bold&#34;&gt;@Serializable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#df8e1d&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;name&lt;/span&gt;: String)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whenever we call User.serialize(), we obtain an object of type KSerializer. Let’s look into the generated code to know how things are structured and get a high level understanding of what’s going on inside, because Hey! code never lies :)&lt;/p&gt;
&lt;p&gt;I’d highly suggest you to open up your IDE, paste the above code in a scratch file (if you don’t have it already) and decompile it to Java code by going to &lt;em&gt;Tools &amp;gt; Kotlin &amp;gt; Show Kotlin Bytecode&lt;/em&gt; and then clicking on &lt;em&gt;Decompile&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you’ve ever inspected or played around with generated code for data classes before, you’d notice some similar code along with quite a lot of extra code. This code is generated by the @Serializable annotation, and mainly includes&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A synthetic, deprecated and inaccessible constructor&lt;/li&gt;
&lt;li&gt;A nested static class $serializer, also deprecated and inaccessible&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The role of the constructor is to initialise the properties of the data class. Now, as this constructor is hidden, it must be used internally in the same class. If we look closely, the constructor is used during deserialization of data to create the class object, in our case a User object.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;$serializer&lt;/code&gt; class is what contains all the logic for the serialization process. This generated class implements an interface called GeneratedSerializer, which in-turn implements the KSerializer interface and overrides a number of methods. KSerializer governs the serialization and deserialization process for an object by defining strategies for serialization and deserialization — SerializationStrategy &amp;amp; DeserializationStrategy. These are responsible for defining how the actual serialization and deserialization of an object work. The interface also defines an object of type 


&lt;a href=&#34;https://github.com/Kotlin/KEEP/blob/serialization/proposals/extensions/serialization.md#descriptor-of-a-serializable-entity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SerialDescriptor&lt;/a&gt;, which contains metadata related to the object and describes internal structure of data to be transformed.&lt;/p&gt;
&lt;p&gt;If we look back at the generated class $serializer, we see a SerialDescriptor object, along with two methods which use this object:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;serialize() — This method is defined in SerializationStrategy interface and its implementation describes the actual serialization process. It receives the value to be encoded and dispatches one or multiple commands to the Encoder to transform the value.&lt;/li&gt;
&lt;li&gt;deserialize() — This method is defined in DeserializationStrategy interface and its implementation describes the actual deserialization process. It receives the value to be decoded and dispatches one or multiple commands to the Decoder to transform the value. The major implementation difference is that unlike serialize(), this method needs to handle values coming in an arbitrary order so that values are bound to the desired properties.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both the Encoder/Decoder expose only structural methods to the external world, while encapsulating the internal implementation of the format the data is being serialized to.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hope this was helpful and you learnt something new. If you haven’t gone through the 



      
    
  &lt;a href=&#34;https://imGurpreetSK.github.io/tags/kotlinx-serialization/&#34;&gt;previous posts&lt;/a&gt;, you should take a look at those.&lt;/p&gt;
&lt;p&gt;Hope it helps!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted on Medium 


&lt;a href=&#34;https://medium.com/@gurpreetsk/kotlin-serialization-optional-and-transient-properties-b3da3247e112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/kotlinx-serialization-process-working/</guid>
      <pubDate>Sat, 13 Jun 2020 02:23:11 +0530</pubDate>
    </item>
    
    <item>
      <title>Kotlinx Serialization - JsonConfiguration</title>
      <link>https://imGurpreetSK.github.io/posts/kotlinx-serialization-jsonconfiguration/</link>
      <description>&lt;br&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/kotlinx-serialization/banner-kotlin-mobile.webp&#34;
  alt=&#34;Header&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;In the previous posts we learned about the basics of kotlin serialization. We instantiated a Json object, passing it a configuration and used it to perform serialization and deserialization operations. This post is about that configuration, called JsonConfiguration — why is it required and what role does it play in the process.&lt;/p&gt;
&lt;p&gt;The JsonConfiguration class is provided by the serialization runtime library and allows us to customise JSON behaviour as per our requirements. It is a simple data class with various properties and two out-of-the-box configurations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stable — adheres to the 


&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4627&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSON specification restrictions (RFC-4627)&lt;/a&gt; and is guaranteed to preserve its semantics between library releases.&lt;/li&gt;
&lt;li&gt;Default — This configuration is what the library recommends for JSON format. It is not guaranteed to preserve its semantics and might change as the runtime library evolves until it hits a version 1.0.0.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Being a data class, you can also copy either of these configurations and make changes as per your requirements, or create a configuration from scratch if that suits your use-case better.&lt;/p&gt;
&lt;p&gt;Customisable properties&lt;/p&gt;
&lt;p&gt;Following are the various available options for JSON-specific behaviour customisation (along with certain examples):&lt;/p&gt;
&lt;h4 id=&#34;1-encodedefaults&#34;&gt;1. encodeDefaults&lt;/h4&gt;
&lt;p&gt;Denotes whether the serialized JSON contains properties with default values or not.&lt;/p&gt;
&lt;h4 id=&#34;2-ignoreunknownkeys&#34;&gt;2. ignoreUnknownKeys&lt;/h4&gt;
&lt;p&gt;If false, any unknown properties in JSON will cause the deserialization to fail. This flag is true by default in stable configuration, however it’s a wise choice to keep it false to maintain backward compatibility while interacting with frequently changing objects or external APIs.&lt;/p&gt;
&lt;h4 id=&#34;3-islenient&#34;&gt;3. isLenient&lt;/h4&gt;
&lt;p&gt;If set to true, removes JSON specification restrictions and allows parsing of malformed JSON objects. In following example, notice how the input JSON is unquoted, yet the parsing succeeds.
However, the parsing will still fail if any string values has spaces or delimiters.&lt;/p&gt;
&lt;h4 id=&#34;4-serializespecialfloatingpointvalues&#34;&gt;4. serializeSpecialFloatingPointValues&lt;/h4&gt;
&lt;p&gt;As the name suggests, allows serialization of special floating point values in the JSON. These values are Infinity, -Infinity and NaN. As a note, you should give a thought why these values are required to be parse at first place.&lt;/p&gt;
&lt;h4 id=&#34;5-unquotedprint&#34;&gt;5. unquotedPrint&lt;/h4&gt;
&lt;p&gt;If true, the output JSON does not have quoted strings. This option is not recommended to be used except for rare debugging purposes as the parsed JSON is invalid.
If any of the values in deserialized output has a string with spaces or delimiters, it will always be quoted.&lt;/p&gt;
&lt;h4 id=&#34;6-prettyprint&#34;&gt;6. prettyPrint&lt;/h4&gt;
&lt;p&gt;If set to true, the output JSON will be pretty-printed.&lt;/p&gt;
&lt;h4 id=&#34;7-indents&#34;&gt;7. indents&lt;/h4&gt;
&lt;p&gt;Specifies the indent to use while parsing and pretty-printing JSON. Pretty printing has to be enabled while providing a custom indent, else the serialization will fail with an IllegalArgumentException.
The next few properties we’ll talk about allow transformation of JSON from one form to another to support certain features which might be legacy or unsupported by default.&lt;/p&gt;
&lt;h4 id=&#34;8-allowstructuredmapkeys&#34;&gt;8. allowStructuredMapKeys&lt;/h4&gt;
&lt;p&gt;In JSON, only primitives can be used as keys. The serialization will fail with the following error if we have some non-primitive type representing a key in the object to be parsed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Value of type &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#39;kotlin.collections.LinkedHashMap&amp;#39;&lt;/span&gt; can&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#39;t be used in JSON as a key in the map.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    It should have either primitive &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;enum&lt;/span&gt; kind, but its kind is &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#39;MAP.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need to serialize a JSON with say a map as a key, you can enable allowStructuredMapKeys flag. This will transform the serialized JSON from a map of key-value pair to a flat list of keys and values.&lt;/p&gt;
&lt;h4 id=&#34;9-usearraypolymorphism&#34;&gt;9. useArrayPolymorphism&lt;/h4&gt;
&lt;p&gt;This flag works only if you’re performing polymorphic serialization (


&lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/polymorphism.md#multiplatform-polymorphic-serialization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this article&lt;/a&gt; and the 


&lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization/blob/master/runtime/commonMain/src/kotlinx/serialization/Polymorphic.kt#L23&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;class docs&lt;/a&gt; do a really good job of explaining what polymorphic serialization is). This flag causes the serialized JSON to be produced in the legacy array format instead of the object format.&lt;/p&gt;
&lt;p&gt;If array polymorphism is not used, the following JSON is obtained:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[{&amp;#34;type&amp;#34;:&amp;#34;Dog&amp;#34;,&amp;#34;lovesTreats&amp;#34;:true},{&amp;#34;type&amp;#34;:&amp;#34;Cat&amp;#34;,&amp;#34;lovesSleeping&amp;#34;:true}]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The ‘type’ in above JSON is called the class discriminator, and can be customised too!&lt;/p&gt;
&lt;h4 id=&#34;10-classdiscriminator&#34;&gt;10. classDiscriminator&lt;/h4&gt;
&lt;p&gt;Use this property to give a custom name to the JSON property describing the class. In the above example, if we pass classDiscriminator=”class” to the JsonConfiguration, the following JSON would be obtained&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[{&amp;#34;class&amp;#34;:&amp;#34;Dog&amp;#34;,&amp;#34;lovesTreats&amp;#34;:true},{&amp;#34;class&amp;#34;:&amp;#34;Cat&amp;#34;,&amp;#34;lovesSleeping&amp;#34;:true}]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;Hope this was helpful and you learnt something new. If you haven’t gone through the previous posts, you should take a look at those:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;



      
    
  &lt;a href=&#34;https://imGurpreetSK.github.io/posts/kotlinx-serialization-getting-started/&#34;&gt;Getting started with Kotlin Serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;



      
    
  &lt;a href=&#34;https://imGurpreetSK.github.io/posts/kotlinx-serialization-optional-and-transient-properties/&#34;&gt;Kotlin serialization — Optional and Transient properties&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This article is third in a series of articles I’m writing on Kotlin serialization while also learning more about the same. Stay tuned and keep learning!&lt;/p&gt;
&lt;p&gt;Hope it helps!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted on Medium 


&lt;a href=&#34;https://medium.com/@gurpreetsk/kotlin-serialization-optional-and-transient-properties-b3da3247e112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/kotlinx-serialization-jsonconfiguration/</guid>
      <pubDate>Wed, 13 May 2020 02:23:11 +0530</pubDate>
    </item>
    
    <item>
      <title>Kotlinx Serialization - Getting Started</title>
      <link>https://imGurpreetSK.github.io/posts/kotlinx-serialization-getting-started/</link>
      <description>&lt;br&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/kotlinx-serialization/banner-kotlin-mobile.webp&#34;
  alt=&#34;Header&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;


&lt;a href=&#34;https://github.com/Kotlin/kotlinx.serialization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kotlin serialization&lt;/a&gt; is kotlin-first, compile-time, type-safe, reflection-free and completely multi-platform ready 


&lt;a href=&#34;https://en.wikipedia.org/wiki/Serialization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;serialization&lt;/a&gt; mechanism to convert kotlin objects into data formats like JSON or Protobuf and vice-versa.
It is comprised of a compiler plugin which is used to generate code for serializable classes and a runtime library, containing core classes and primitives for serialization &amp;amp; IO, among some other things.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/kotlinx-serialization/kotlinx-serialization-current-structure.webp&#34;
  alt=&#34;current-library-runtime-structure&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;Kotlinx serialization runtime project structure&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;While JSON format is supported out of the box by the library, there’s first-class support for other formats like Protobuf &amp;amp; CBOR, with the option to extend the functionality by writing your own library to support any other format.&lt;/p&gt;
&lt;p&gt;The effort was 


&lt;a href=&#34;https://discuss.kotlinlang.org/t/kotlin-serialization/2063&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;first announced&lt;/a&gt; in October 2016, where 


&lt;a href=&#34;https://x.com/elizarov&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@elizarov&lt;/a&gt; posted about the team’s efforts on “working on a generic Kotlin Serialization facility for some future release of Kotlin”. You can know more about the design, goals and core concepts of kotlin serialization by going through 


&lt;a href=&#34;https://github.com/Kotlin/KEEP/blob/serialization/proposals/extensions/serialization.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this KEEP&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;Why?&lt;/h3&gt;
&lt;p&gt;Code sharing between platforms isn’t easy. Each platform you want to support has different ways of handling different things — IO, transformations, threading, serialization to name a few. There already are various libraries out there which support kotlin serialization, even generate kotlin code if you want to, Square’s Moshi being probably being the most famous one.&lt;/p&gt;
&lt;p&gt;However, all of these work only on JVM and don’t support other platforms. That’s why a new mechanism is required — one that supports all the platforms.&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;
&lt;p&gt;Please refer to the official guide to setup. It’s simple, all you’ll need to do is :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Apply the serialization plugin, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add dependency on the runtime library in your build.gradle file.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You’ll need to be on Kotlin version 1.3.70 or higher to use runtime library version 0.20.0, which is the latest release at time of writing this article.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;learning-by-examples&#34;&gt;Learning by examples&lt;/h2&gt;
&lt;p&gt;(You can see all these examples as a series of unit tests here in 


&lt;a href=&#34;https://gist.github.com/GurpreetSK95/d227315561c470f12f488f03ec0007a9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this gist&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Let’s go through some of the basic cases you’re likely to encounter if you plan on using kotlin serialization in one of your projects.&lt;/p&gt;
&lt;h3 id=&#34;1-parse-json-object-to-kotlin-object&#34;&gt;1. Parse JSON object to Kotlin object&lt;/h3&gt;
&lt;p&gt;Suppose you want to convert a JSON object to a kotlin object. For this, you’ll need to specify two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The object to which you’re trying to parse the JSON to, and&lt;/li&gt;
&lt;li&gt;The behaviour of the JSON format you’re trying to parse&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s say we want to parse JSON containing user’s information — just his name for now. The JSON looks like &lt;code&gt;{“name”: “Gurpreet”}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Kotlin, this can be represented as a data class User with a name property.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data class User(val name: String)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this class can’t be used just yet for serialization purposes as we haven’t told the compiler to generate serialization code. This is where @Serializable annotation comes to use. This annotation instructs the compiler to generate code required for performing serialization for our class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e66f5;font-weight:bold&#34;&gt;@Serializable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#df8e1d&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;name&lt;/span&gt;: String)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That it! It’s as simple as that. Now the compiler can understand and serialize User objects.&lt;/p&gt;
&lt;p&gt;Next, we need to define JSON format behaviour we’re trying to pass. We do this by specifying a Json instance. From the docs, this class is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The main entry point to work with JSON serialization&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It is typically used by constructing an application&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;specific instance, with configured json&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;-&lt;/span&gt;specific behaviour&lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We’ll also need to defined what type of JSON we’re expecting. We define this using JsonConfiguration. This class helps us configure the behaviour for Json object. We’ll discuss more about this class a later, but for now, it’s good to know that it provides two ready to use configurations for us to use — Stable and Default. We’ll use the Stable configuration, which adheres to the 


&lt;a href=&#34;https://www.ietf.org/rfc/rfc4627.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSON specification restriction&lt;/a&gt; and is provided by the runtime library.&lt;/p&gt;
&lt;p&gt;Now that we’ve gathered information about what we need, we can take a look at code to serialize the JSON to an object. It’s as simple as calling parse on the Json instance we have created. You have to pass the serializer and the JSON you want to parse.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Json(&lt;span style=&#34;color:#df8e1d&#34;&gt;JsonConfiguration&lt;/span&gt;.Stable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .parse(&lt;span style=&#34;color:#df8e1d&#34;&gt;User&lt;/span&gt;.serializer(), &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;&amp;#34;&amp;#34;{&amp;#34;name&amp;#34;: &amp;#34;Gurpreet&amp;#34;}&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// User(&amp;#34;Gurpreet&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code reads &lt;em&gt;“Parse this input JSON to a User object using the serializer provided. The JSON provided to the parse is ‘stable’ i.e., adheres to the standards”&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&#34;2-convert-kotlin-object-to-json&#34;&gt;2. Convert Kotlin object to JSON&lt;/h4&gt;
&lt;p&gt;To deserialize an object (i.e. to convert it to JSON), stringify method can be used. Unlike parse, this method takes the kotlin object to deserialize as an argument.&lt;/p&gt;
&lt;p&gt;The following code snippet shows how we can convert User object to JSON.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Json(&lt;span style=&#34;color:#df8e1d&#34;&gt;JsonConfiguration&lt;/span&gt;.Stable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .stringify(&lt;span style=&#34;color:#df8e1d&#34;&gt;User&lt;/span&gt;.serializer(), User(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Gurpreet&amp;#34;&lt;/span&gt;))&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// {&amp;#34;name&amp;#34;:&amp;#34;Gurpreet&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-parsing-an-object-containing-a-list-of-objects&#34;&gt;3. Parsing an object containing a list of objects&lt;/h3&gt;
&lt;p&gt;Let’s say you have to parse a list of contacts instead of a single object and the JSON looks something like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;jsonToParse&lt;/span&gt; = &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;&amp;#34;&amp;#34;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;  &amp;#34;result&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;      &amp;#34;name&amp;#34;: &amp;#34;Contact 1&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;      &amp;#34;name&amp;#34;: &amp;#34;Contact 2&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;      &amp;#34;name&amp;#34;: &amp;#34;Contact 3&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;}&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the structure, we can infer that we need an object which contains a list of User objects. We define it as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e66f5;font-weight:bold&#34;&gt;@Serializable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#df8e1d&#34;&gt;User&lt;/span&gt;(&lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;name&lt;/span&gt;: String)&lt;span style=&#34;color:#1e66f5;font-weight:bold&#34;&gt;@Serializable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#df8e1d&#34;&gt;Contacts&lt;/span&gt;(&lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;result&lt;/span&gt;: List&amp;lt;User&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that we’ve marked both the classes as @Serializable. If we don’t mark User as @Serializable, the compiler will report an error which says Serializer has not been found for type &amp;lsquo;User’, essentially meaning that it doesn’t know how to serialize the type.&lt;/p&gt;
&lt;p&gt;It’s pretty straight-forward from here. We need to serialize the JSON to Contactsobject, similar to how we parsed a User object before&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Json(&lt;span style=&#34;color:#df8e1d&#34;&gt;JsonConfiguration&lt;/span&gt;.Stable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .parse(&lt;span style=&#34;color:#df8e1d&#34;&gt;Contacts&lt;/span&gt;.serializer(), jsonToParse)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Contacts(listOf(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;//    User(&amp;#34;Contact 1&amp;#34;),
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;//    User(&amp;#34;Contact 2&amp;#34;),
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;//    User(&amp;#34;Contact 3&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// ))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that you can obtain the JSON back by using stringify in this case too.&lt;/p&gt;
&lt;h3 id=&#34;4-parsing-a-list-of-objects&#34;&gt;4. Parsing a list of objects&lt;/h3&gt;
&lt;p&gt;If you noticed, all the types we have talked about till now are user defined types. We learnt about how to serialize and deserialize them. But what about the cases where we want to operate on a collection of objects, for example, a list of Users? We can’t apply @Serializable on a class we don’t own 🤷‍♂.&lt;/p&gt;
&lt;p&gt;For this, the team at Jetbrains has got us covered 🎊. Serializers to parse widely used collections — Lists, Maps and Sets — are provided by the runtime library out of the box . To parse a list of contacts as shown below, we can use ListSerializer. All we need to do is tell what type of objects the list comprises of, which is User in our case.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;listOfContacts&lt;/span&gt; = &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;&amp;#34;&amp;#34;[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    &amp;#34;name&amp;#34;: &amp;#34;Contact 1&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    &amp;#34;name&amp;#34;: &amp;#34;Contact 2&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;    &amp;#34;name&amp;#34;: &amp;#34;Contact 3&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#40a02b&#34;&gt;]&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To serialize the JSON, we do&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Json(&lt;span style=&#34;color:#df8e1d&#34;&gt;JsonConfiguration&lt;/span&gt;.Stable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .parse(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ListSerializer(&lt;span style=&#34;color:#df8e1d&#34;&gt;User&lt;/span&gt;.serializer()),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        listOfContacts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// listOf(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;//   User(&amp;#34;Contact 1&amp;#34;),
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;//   User(&amp;#34;Contact 2&amp;#34;),
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;//   User(&amp;#34;Contact 3&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// )
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly, we can deserialize the list to JSON by&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Json(&lt;span style=&#34;color:#df8e1d&#34;&gt;JsonConfiguration&lt;/span&gt;.Stable)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .stringify(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ListSerializer(&lt;span style=&#34;color:#df8e1d&#34;&gt;User&lt;/span&gt;.serializer()),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        listOf(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            User(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Contact 1&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            User(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Contact 2&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            User(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Contact 3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// [{&amp;#34;name&amp;#34;: &amp;#34;Contact 1&amp;#34;},{&amp;#34;name&amp;#34;:&amp;#34;Contact 2&amp;#34;},{&amp;#34;name&amp;#34;:&amp;#34;Contact 3&amp;#34;}]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also serialize Maps by using MapSerializerand Sets by using SetSerializer in a similar way.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hope this was helpful and you learnt something new. You can read 



      
    
  &lt;a href=&#34;https://imGurpreetSK.github.io/posts/kotlinx-serialization-optional-and-transient-properties/&#34;&gt;the continuation article&lt;/a&gt; to this which talks about handling optional and transient properties.&lt;/p&gt;
&lt;p&gt;This article is first of a series of articles I’m writing on Kotlin serialization while also learning more about the same. Stay tuned, stay inside and keep reading!&lt;/p&gt;
&lt;p&gt;Hope it helps!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted on Medium 


&lt;a href=&#34;https://medium.com/@gurpreetsk/getting-started-with-kotlin-serialization-3315c59bafb2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/kotlinx-serialization-getting-started/</guid>
      <pubDate>Sun, 03 May 2020 02:23:11 +0530</pubDate>
    </item>
    
    <item>
      <title>Kotlinx Serialization - optional and transient properties</title>
      <link>https://imGurpreetSK.github.io/posts/kotlinx-serialization-optional-and-transient-properties/</link>
      <description>&lt;p&gt;When interacting with a Rest API, it’s common to have some optional properties in the response. These properties might or might not be present at runtime. Let’s consider we updated out User data object to contain a required, non-nullable and unique id and age, which is an optional, nullable property.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e66f5;font-weight:bold&#34;&gt;@Serializable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#df8e1d&#34;&gt;User&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;id&lt;/span&gt;: String,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;name&lt;/span&gt;: String,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;age&lt;/span&gt;: Int? = &lt;span style=&#34;color:#8839ef&#34;&gt;null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(You can see all these examples as a series of unit tests here in 


&lt;a href=&#34;https://gist.github.com/GurpreetSK95/f2752ac9984cb6fc122765762fc8df31&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this gist&lt;/a&gt;.)&lt;/p&gt;
&lt;h4 id=&#34;handling-optional-values&#34;&gt;Handling optional values&lt;/h4&gt;
&lt;p&gt;Kotlin’s features — especially its nullable types and default parameter values prove to be great when dealing with JSON. You don’t need to do anything special to handle optional values when working with Kotlin serialization.&lt;/p&gt;
&lt;p&gt;All properties with default values are considered optional.&lt;/p&gt;
&lt;p&gt;In our case, age is an optional property with null as its default value. the property will be serialized if it’s found in JSON, else the serialized object will have age as null, unlike for required objects where a MissingFieldException is thrown.&lt;/p&gt;
&lt;h4 id=&#34;handling-transient-values&#34;&gt;Handling Transient values&lt;/h4&gt;
&lt;p&gt;Transient properties are those which you never want to take part in the entire serialization process. An example can be adding an isAdult property to our User object. The value is calculated on client side and will never be returned by the Rest API, hence it never needs to take part in the entire process.&lt;/p&gt;
&lt;p&gt;Such properties can be marked using @Transient annotation. From the docs:&lt;/p&gt;
&lt;p&gt;Marking a property Transient makes it invisible for whole serialization framework.&lt;/p&gt;
&lt;p&gt;This also means that transient properties must have default values, as they can’t be initialized otherwise.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That’s all for this one folks! Hope this was helpful and you learnt something new.&lt;/p&gt;
&lt;p&gt;This article is second of a series of articles I’m writing on Kotlin serialization while also learning more about the same. Stay tuned, stay inside and keep reading!&lt;/p&gt;
&lt;p&gt;Hope it helps!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted on Medium 


&lt;a href=&#34;https://medium.com/@gurpreetsk/kotlin-serialization-optional-and-transient-properties-b3da3247e112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/kotlinx-serialization-optional-and-transient-properties/</guid>
      <pubDate>Sun, 03 May 2020 02:23:11 +0530</pubDate>
    </item>
    
    <item>
      <title>Multi-caret in Android Studio</title>
      <link>https://imGurpreetSK.github.io/posts/multi-caret-in-android-studio/</link>
      <description>&lt;p&gt;Knowing keyboard shortcuts is important. They save you time and help you achieve more in less time. If you need convincing, I highly recommend watching 


&lt;a href=&#34;https://vimeo.com/98922030&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;‘Mouseless Driven Development’ by Hadi Hariri&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog post is about one such feature of Android Studio (or any JetBrains IDE for that matter) which not a lot of people know about — multi-caret selection. A lot of my friends and colleagues who I pair-program with feel amazed by it and always ask “What was that!?”, so I decided to write about it to help them and everyone out there know about these.&lt;/p&gt;
&lt;p&gt;Why use it? Because sometimes you need to replace just a few instances of a word/pattern and find &amp;amp; replace is not very useful.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/multi-caret-in-android-studio/shortcuts.webp&#34;
  alt=&#34;Shortcuts&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;alt--j--control--g-select-next-occurrence&#34;&gt;Alt + J / Control + G (Select next occurrence)&lt;/h3&gt;
&lt;p&gt;Select next occurrence of the currently selected text. If no text is selected, the current word with cursor is selected.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/multi-caret-in-android-studio/select-next-occurrence.gif&#34;
  alt=&#34;Select-next-occurrence&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h3 id=&#34;alt--shift--j--control-shift--g-unselect-current-occurrence&#34;&gt;Alt + Shift + J / Control +Shift + G (Unselect current occurrence)&lt;/h3&gt;
&lt;p&gt;Unselect current occurrence of selected text.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/multi-caret-in-android-studio/unselect-current-occurrence.gif&#34;
  alt=&#34;unselect-current-occurrence&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h3 id=&#34;alt--shift--ctrl--j--control--command--g-select-all-occurrences&#34;&gt;Alt + Shift + Ctrl + J / Control + Command + G (Select all occurrences)&lt;/h3&gt;
&lt;p&gt;Select all occurrences of the word in current file&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/multi-caret-in-android-studio/select-all-occurrences.gif&#34;
  alt=&#34;Select-all-occurrence&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h3 id=&#34;alt--click--scroll--option--click--scroll-multiple-cursors-in-column&#34;&gt;Alt + click &amp;amp; scroll / Option + click &amp;amp; scroll (Multiple cursors in column)&lt;/h3&gt;
&lt;p&gt;Select a column of text in current file&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/multi-caret-in-android-studio/multiple-cursors-in-column.gif&#34;
  alt=&#34;multiple-cursors-in-column&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h3 id=&#34;alt--shift--clicks--option--shift--clicks-spawn-caret-at-click-position&#34;&gt;Alt + Shift + clicks / Option + Shift + clicks (Spawn caret at click position)&lt;/h3&gt;
&lt;p&gt;Spawn carets across file at click position, even in the same word.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/multi-caret-in-android-studio/caret-at-click-position.gif&#34;
  alt=&#34;caret-at-click-position&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hope it helps!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted on Medium 


&lt;a href=&#34;https://medium.com/@gurpreetsk/multi-caret-in-android-studio-ef9fe83f1758&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/multi-caret-in-android-studio/</guid>
      <pubDate>Sat, 08 Jun 2019 02:23:11 +0530</pubDate>
    </item>
    
    <item>
      <title>Kotlin Sequences</title>
      <link>https://imGurpreetSK.github.io/posts/kotlin-sequences/</link>
      <description>&lt;p&gt;Transforming, filtering, manipulating and operating on data is what every developer does almost every day at their jobs. If you’re using Kotlin for writing your applications, you might have used map or filter operator to transform a collection from one form to another.&lt;/p&gt;
&lt;p&gt;Along with the kotlin.collections package, Kotlin also provides a way to lazily represent and evaluate a collection of data. This is accomplished using Sequences.&lt;/p&gt;
&lt;h3 id=&#34;sequences-are-a-collection-of-possibly-infinite-data-ordered-in-a-certain-way&#34;&gt;&lt;em&gt;Sequences are a collection of possibly infinite data, ordered in a certain way.&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Sequences are a part of the language standard library and allow lazy evaluation of large amount of data (in millions), as opposed to collections, which compute and evaluate operations on a data set eagerly.&lt;/p&gt;
&lt;p&gt;Looking at the source, it’s pretty clear that the Sequence interface is similar to Iterable in definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#df8e1d&#34;&gt;Sequence&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#8839ef&#34;&gt;out&lt;/span&gt; T&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8839ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#1e66f5&#34;&gt;iterator&lt;/span&gt;(): Iterator&amp;lt;T&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#df8e1d&#34;&gt;Iterable&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#8839ef&#34;&gt;out&lt;/span&gt; T&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8839ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#1e66f5&#34;&gt;iterator&lt;/span&gt;(): Iterator&amp;lt;T&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sequences maintain the same API as collections. The difference comes in the way they are implemented. Let’s take an example to understand.&lt;/p&gt;
&lt;p&gt;Let’s suppose we have a list of customers, and each customer has a recorded unique id, first name, last name and age.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;UNDEFINED&lt;/span&gt; = -&lt;span style=&#34;color:#fe640b&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#df8e1d&#34;&gt;Customer&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;firstName&lt;/span&gt;: String,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;lastName&lt;/span&gt;: String? = &lt;span style=&#34;color:#8839ef&#34;&gt;null&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;age&lt;/span&gt;: Int = UNDEFINED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, let’s define some data to demonstrate:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#1e66f5&#34;&gt;getCustomers&lt;/span&gt;(): List&amp;lt;Customer&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8839ef&#34;&gt;return&lt;/span&gt; listOf(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Customer(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Ragunath&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Jawahar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fe640b&#34;&gt;31&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Customer(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Dinesh&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Raja&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fe640b&#34;&gt;28&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Customer(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Donn&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Felker&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fe640b&#34;&gt;42&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Customer(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;RMK&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Customer(&lt;span style=&#34;color:#40a02b&#34;&gt;&amp;#34;Omar&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we’re done with the basic setup, let’s define the problem statement. Let’s say we need to get the first names of all the customers whose age is not UNDEFINED and whose last name isn’t null. We can do this using the filter and map operators provided by the Collections API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#1e66f5&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;result&lt;/span&gt; = getCustomers()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .filter { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.lastName &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;null&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .filter { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.age &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;!=&lt;/span&gt; UNDEFINED }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .find   { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.age &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;31&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  println(result)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we first filter the customers whose last name is null, then filter customers whose age is UNDEFINED. Finally, we map the remaining customers’ first name and collect them in a list. If you run the above example, the output would be as expected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Customer(firstName=Ragunath, lastName=Jawahar, age=&lt;span style=&#34;color:#fe640b&#34;&gt;31&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what were the operations leading to this output? If we put an onEach operator after each operation and print the value input to the function, the output would be something on the lines of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter lastName: Customer(firstName=Ragunath, lastName=Jawahar, age=31)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter lastName: Customer(firstName=Dinesh, lastName=Raja, age=28)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter lastName: Customer(firstName=Donn, lastName=Felker, age=42)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter lastName: Customer(firstName=RMK, lastName=, age=0)filter age: Customer(firstName=Ragunath, lastName=Jawahar, age=31)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter age: Customer(firstName=Dinesh, lastName=Raja, age=28)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter age: Customer(firstName=Donn, lastName=Felker, age=42)Customer(firstName=Ragunath, lastName=Jawahar, age=31)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result above shows Eager evaluation. The filter operation is applied on the entire collection (input), and an intermediate collection is formed. This intermediate collection is then passed down the chain to the next filter, which repeats the process and passes another collection to the find function, which returns the result.&lt;/p&gt;
&lt;p&gt;This approach has two drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creation of varying number of intermediate collections, depending on the number of operations to be performed, and&lt;/li&gt;
&lt;li&gt;Processing of all elements in the collection, even if it is not required.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This hardly makes any difference in this tiny example, or even for any relatively larger use case for that matter (thanks to judicious use of inlined functions in stdlib and good garbage collection support by JVM),&lt;/p&gt;
&lt;p&gt;But think about a case where the input data is in order of Millions, or virtually infinite? Wouldn’t it be nice if we could compute on data one after another, and bail as soon as the required condition is met?&lt;/p&gt;
&lt;p&gt;This is exactly what sequences do! Here’s what the code above would look like when using sequences:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#1e66f5&#34;&gt;main&lt;/span&gt;(args: Array&amp;lt;String&amp;gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;result&lt;/span&gt; = getCustomers()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .asSequence() &lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Creating a sequence
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;&lt;/span&gt;      .filter { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.lastName &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;null&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .filter { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.age &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;!=&lt;/span&gt; UNDEFINED }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .find   { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.age &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;31&lt;/span&gt; } &lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Terminal operation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  println(result)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We create a sequence by wrapping the existing collection, and returning its elements when being iterated. If we apply the onEach function here and check the output, it’ll look like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter lastName: Customer(firstName=Ragunath, lastName=Jawahar, age=31)filter age: Customer(firstName=Ragunath, lastName=Jawahar, age=31)Customer(firstName=Ragunath, lastName=Jawahar, age=31)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once a terminal operation is encountered, computations are carried out one after another, and as soon as a result is found, execution is stopped. This is why sequences are called lazy.&lt;/p&gt;
&lt;p&gt;A visual comparison of how collections and sequences work can be:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;https://imGurpreetSK.github.io/assets/posts/kotlin-sequences-1.webp&#34;
  alt=&#34;kotlin-sequences&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You might have noticed the term ‘Terminal’ operation. If we remove it, no computation will be carried out. This is because operations on a sequence are divided into two categories: Intermediate and Terminal.&lt;/p&gt;
&lt;p&gt;Intermediate operations return a sequence which knows how to transform elements of the original sequence. These operations are always lazy, and are postponed until a terminal operation is performed. The terminal operation performs all the postponed operations and returns a some value as a result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getCustomers()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .asSequence() &lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Creating a sequence
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;&lt;/span&gt;      .filter { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.lastName &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#8839ef&#34;&gt;null&lt;/span&gt; } &lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Intermediate operation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;&lt;/span&gt;      .filter { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.age &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;!=&lt;/span&gt; UNDEFINED } &lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Intermediate operation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;&lt;/span&gt;      .find   { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt;.age &lt;span style=&#34;color:#04a5e5;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;31&lt;/span&gt; } &lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Terminal operation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;“Okay, this looks interesting. Let’s use sequences EVERYWHERE!”.&lt;/p&gt;
&lt;p&gt;Nope. Please don’t.&lt;/p&gt;
&lt;p&gt;As a rule of thumb, a sequence should be used at places where a chain of operations are being performed on a very large (or possibly infinite) collection of data, and/or there is a need to break out of the computation as soon as an element matching the predicate is found. As mentioned earlier, eager operations on regular collections are highly optimised and efficient in kotlin and should fare you well for most cases.&lt;/p&gt;
&lt;p&gt;Another thing to remember is that the elements of a sequence cannot be accessed as simply as elements of a collection. For example, the following snippet will produce a compile-time error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8839ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#1e66f5&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8839ef&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#fe640b&#34;&gt;sequence&lt;/span&gt; = (&lt;span style=&#34;color:#fe640b&#34;&gt;1.&lt;/span&gt;.&lt;span style=&#34;color:#fe640b&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     .asSequence()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     .map { &lt;span style=&#34;color:#8839ef&#34;&gt;it&lt;/span&gt; * &lt;span style=&#34;color:#fe640b&#34;&gt;3&lt;/span&gt; }    println(sequence[&lt;span style=&#34;color:#fe640b&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;// Error: Unresolved Reference. None of the                                              following candidate is applicable because of receiver type mismatch.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#9ca0b0;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is because the accessed element might not have been processed at all! (remember lazy evaluation for sequences?)&lt;/p&gt;
&lt;p&gt;Hope this helps!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted on Medium 


&lt;a href=&#34;https://medium.com/android-news/kotlin-sequences-ac6dc7c883d3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/kotlin-sequences/</guid>
      <pubDate>Sun, 10 Mar 2019 02:23:11 +0530</pubDate>
    </item>
    
    <item>
      <title>Listening to Memory events using onTrimMemory() on Android</title>
      <link>https://imGurpreetSK.github.io/posts/listening-to-memory-events-using-ontrimmemory/</link>
      <description>&lt;p&gt;Anyone who has been developing android application knows how memory-scarce the platform is, with each application being provided with 


&lt;a href=&#34;https://stackoverflow.com/questions/18675557/what-is-the-maximum-amount-of-ram-an-app-can-use&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;upto 24/32mb of memory&lt;/a&gt; (which can go to as low as 16mb for older devices). In such a scenario, it is the developer’s duty to look out for memory leaks and free any resources that are not been used by the application.&lt;/p&gt;
&lt;p&gt;One way of managing memory in response to system events is the 


&lt;a href=&#34;https://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory%28int%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;onTrimMemory() method&lt;/a&gt;. From the docs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;onTrimMemory():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This will happen for example when it goes in the background and there is not enough memory to keep as many background processes running as desired.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Found in the ComponentsCallback2 interface, this method should be implemented to incrementally release memory based on current system constraints. This helps provide a more responsive system overall, and benefits the user experience for the application by allowing the system to keep the process alive longer.&lt;/p&gt;
&lt;p&gt;For a better read on how to optimise the memory usage, do read the official docs, or show some love and I’ll post another article on Using More Memory-Efficient Code Constructs to create android applications. All kinds of feedback is welcome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Memory limits per app are here depending on screen size and Android version: 


&lt;a href=&#34;https://drive.google.com/file/d/0B7Vx1OvzrLa3Y0R0X1BZbUpicGc/view&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://drive.google.com/file/d/0B7Vx1OvzrLa3Y0R0X1BZbUpicGc/view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;


&lt;a href=&#34;https://stackoverflow.com/questions/19398827/understanding-ontrimmemory-int-level&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/19398827/understanding-ontrimmemory-int-level&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Originally posted on Medium 


&lt;a href=&#34;https://medium.com/@gurpreetsk/memory-management-on-android-using-ontrimmemory-f500d364bc1a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
      <author>Gurpreet</author>
      <guid>https://imGurpreetSK.github.io/posts/listening-to-memory-events-using-ontrimmemory/</guid>
      <pubDate>Mon, 21 Aug 2017 10:08:35 +0530</pubDate>
    </item>
    
  </channel>
</rss>
