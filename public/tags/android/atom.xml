<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on GurpreetSK.com</title>
    <link>//localhost:1313/tags/android/</link>
    <description>Recent content in Android on GurpreetSK.com</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 08 Jun 2019 02:23:11 +0530</lastBuildDate>
    <atom:link href="//localhost:1313/tags/android/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi-caret in Android Studio</title>
      <link>//localhost:1313/posts/multi-caret-in-android-studio/</link>
      <pubDate>Sat, 08 Jun 2019 02:23:11 +0530</pubDate>
      <guid>//localhost:1313/posts/multi-caret-in-android-studio/</guid>
      <description>&lt;p&gt;Knowing keyboard shortcuts is important. They save you time and help you achieve more in less time. If you need convincing, I highly recommend watching &#xA;&lt;a href=&#34;https://vimeo.com/98922030&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;‘Mouseless Driven Development’ by Hadi Hariri&lt;/a&gt;&#xA;&#xA;.&lt;/p&gt;&#xA;&lt;p&gt;This blog post is about one such feature of Android Studio (or any JetBrains IDE for that matter) which not a lot of people know about — multi-caret selection. A lot of my friends and colleagues who I pair-program with feel amazed by it and always ask “What was that!?”, so I decided to write about it to help them and everyone out there know about these.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin Sequences</title>
      <link>//localhost:1313/posts/kotlin-sequences/</link>
      <pubDate>Sun, 10 Mar 2019 02:23:11 +0530</pubDate>
      <guid>//localhost:1313/posts/kotlin-sequences/</guid>
      <description>&lt;p&gt;Transforming, filtering, manipulating and operating on data is what every developer does almost every day at their jobs. If you’re using Kotlin for writing your applications, you might have used map or filter operator to transform a collection from one form to another.&lt;/p&gt;&#xA;&lt;p&gt;Along with the kotlin.collections package, Kotlin also provides a way to lazily represent and evaluate a collection of data. This is accomplished using Sequences.&lt;/p&gt;&#xA;&lt;h3 id=&#34;sequences-are-a-collection-of-possibly-infinite-data-ordered-in-a-certain-way&#34;&gt;&lt;em&gt;Sequences are a collection of possibly infinite data, ordered in a certain way.&lt;/em&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Sequences are a part of the language standard library and allow lazy evaluation of large amount of data (in millions), as opposed to collections, which compute and evaluate operations on a data set eagerly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Listening to Memory events using onTrimMemory() on Android</title>
      <link>//localhost:1313/posts/listening-to-memory-events-using-ontrimmemory/</link>
      <pubDate>Mon, 21 Aug 2017 10:08:35 +0530</pubDate>
      <guid>//localhost:1313/posts/listening-to-memory-events-using-ontrimmemory/</guid>
      <description>&lt;p&gt;Anyone who has been developing android application knows how memory-scarce the platform is, with each application being provided with &#xA;&lt;a href=&#34;https://stackoverflow.com/questions/18675557/what-is-the-maximum-amount-of-ram-an-app-can-use&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;upto 24/32mb of memory&lt;/a&gt;&#xA;&#xA; (which can go to as low as 16mb for older devices). In such a scenario, it is the developer’s duty to look out for memory leaks and free any resources that are not been used by the application.&lt;/p&gt;&#xA;&lt;p&gt;One way of managing memory in response to system events is the &#xA;&lt;a href=&#34;https://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory%28int%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;onTrimMemory() method&lt;/a&gt;&#xA;&#xA;. From the docs:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
